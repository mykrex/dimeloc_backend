const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY no configurada en variables de entorno');
    }
    
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ 
      model: "gemini-2.0-flash",
      generationConfig: {
        temperature: 0.3, // M√°s consistente para an√°lisis
        topP: 0.8,
        maxOutputTokens: 2000 // Aumentado para an√°lisis m√°s complejos
      }
    });
  }
  
  // ‚úÖ M√âTODOS EXISTENTES (mantener tal como est√°n)
  async analyzeStoreFeedback(storeName, feedbacks) {
    const prompt = `
Eres un analista de retail experto. Analiza el feedback de la tienda "${storeName}":

COMENTARIOS RECIENTES:
${feedbacks.map((f, i) => `${i+1}. [${f.fecha}] ${f.colaborador}: "${f.comentario}" (Categor√≠a: ${f.categoria}, Urgencia: ${f.urgencia})`).join('\n')}

INSTRUCCIONES:
- Identifica problemas recurrentes o urgentes que requieren acci√≥n inmediata
- Detecta tendencias preocupantes que puedan afectar el negocio
- Genera recomendaciones espec√≠ficas y accionables
- Prioriza por impacto en ventas, seguridad y satisfacci√≥n del cliente

RESPONDE EXACTAMENTE EN ESTE FORMATO JSON (sin texto adicional):
{
  "alerts": ["problema urgente que requiere acci√≥n inmediata"],
  "insights": ["patrones o tendencias identificadas"],
  "recommendations": ["acciones espec√≠ficas recomendadas"],
  "priority": "alta|media|baja",
  "summary": "resumen ejecutivo en m√°ximo 50 palabras"
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Limpiar respuesta para asegurar JSON v√°lido
      const cleanText = text.replace(/```json|```/g, '').trim();
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estructura
        if (!analysis.alerts || !analysis.insights || !analysis.recommendations || !analysis.priority) {
          throw new Error('Estructura de respuesta inv√°lida');
        }
        
        return analysis;
      }
      
      throw new Error('No se pudo extraer JSON v√°lido de la respuesta');
      
    } catch (error) {
      console.error('Error con Gemini:', error);
      
      // Fallback en caso de error
      return {
        alerts: ["Error en an√°lisis autom√°tico - revisar manualmente"],
        insights: [`An√°lisis no disponible para ${feedbacks.length} comentario(s)`],
        recommendations: ["Revisar comentarios manualmente", "Verificar conectividad con sistema de an√°lisis"],
        priority: "media",
        summary: "An√°lisis autom√°tico fall√≥ - requiere revisi√≥n manual"
      };
    }
  }
  
  async generateQuickInsight(singleFeedback) {
    const prompt = `
Analiza este feedback individual de tienda:

FEEDBACK: "${singleFeedback.comentario}"
CATEGOR√çA: ${singleFeedback.categoria}
URGENCIA: ${singleFeedback.urgencia}
COLABORADOR: ${singleFeedback.colaborador}

Genera un insight r√°pido en m√°ximo 100 caracteres sobre el problema y si requiere atenci√≥n inmediata.

Responde solo el insight, sin formato adicional.`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text().trim();
    } catch (error) {
      console.error('Error generando insight r√°pido:', error);
      return `Feedback sobre ${singleFeedback.categoria} - requiere revisi√≥n`;
    }
  }

  // üöÄ NUEVOS M√âTODOS AVANZADOS

  async generarAnalisisPrevisita(contexto) {
    const prompt = `
Eres un analista experto en retail. Genera recomendaciones PRE-VISITA para un colaborador.

DATOS DE LA TIENDA:
- Nombre: ${contexto.tienda.nombre}
- NPS: ${contexto.tienda.nps}
- Damage Rate: ${contexto.tienda.damage_rate}%
- Out of Stock: ${contexto.tienda.out_of_stock}%
- √öltima visita: ${contexto.tienda.ultima_visita || "Sin registro"}
- Horario: ${contexto.tienda.horario}

FEEDBACK HIST√ìRICO (${contexto.feedback_historico.length} comentarios recientes):
${contexto.feedback_historico.slice(0, 10).map(f => 
  `- [${f.fecha}] ${f.categoria}: ${f.descripcion} (${f.urgencia})`
).join('\n')}

EVALUACIONES PREVIAS (${contexto.evaluaciones_previas.length} evaluaciones):
${contexto.evaluaciones_previas.slice(0, 5).map(e => {
  const limpieza = e.aspectos?.limpieza?.calificacion || 'N/A';
  const areas = e.areas_mejora?.slice(0, 3).join(', ') || 'Ninguna registrada';
  return `- Limpieza: ${limpieza}/5, √Åreas mejora: ${areas}`;
}).join('\n')}

VISITAS RECIENTES (${contexto.visitas_recientes.length} visitas):
${contexto.visitas_recientes.slice(0, 3).map(v => 
  `- [${v.fecha_realizada}] Duraci√≥n: ${v.duracion_minutos || 'N/A'} min, Notas: ${v.notas_finales || 'Sin notas'}`
).join('\n')}

TIPO DE VISITA: ${contexto.tipo_visita}

INSTRUCCIONES:
Bas√°ndote en el historial, genera recomendaciones espec√≠ficas para la pr√≥xima visita. Enf√≥cate en:
1. Problemas sin resolver que requieren verificaci√≥n f√≠sica
2. Puntos espec√≠ficos a revisar en la tienda
3. Preguntas clave para hacer al tendero
4. Evidencias fotogr√°ficas importantes a capturar
5. √Åreas de oportunidad detectadas en datos

RESPONDE EXACTAMENTE EN FORMATO JSON:
{
  "problemas_pendientes": ["problema espec√≠fico a verificar"],
  "puntos_verificar": ["qu√© revisar f√≠sicamente en la tienda"],
  "preguntas_tendero": ["pregunta espec√≠fica para el tendero"],
  "evidencias_capturar": ["tipo de foto/evidencia necesaria"],
  "areas_oportunidad": ["mejora potencial identificada"],
  "prioridad_visita": "alta|media|baja",
  "tiempo_estimado": "X-Y minutos",
  "preparacion_especial": "equipo o materiales especiales necesarios"
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json|```/g, '').trim();
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estructura m√≠nima
        if (!analysis.problemas_pendientes || !analysis.puntos_verificar) {
          throw new Error('Estructura de respuesta inv√°lida');
        }
        
        return analysis;
      }
      
      throw new Error('No se pudo extraer JSON v√°lido');
      
    } catch (error) {
      console.error('Error en an√°lisis pre-visita:', error);
      return {
        problemas_pendientes: ["Error en an√°lisis - revisar datos manualmente"],
        puntos_verificar: ["Inspecci√≥n general de la tienda", "Verificar estado de equipos"],
        preguntas_tendero: ["¬øC√≥mo ha estado el servicio √∫ltimamente?", "¬øHay alg√∫n problema que requiera atenci√≥n?"],
        evidencias_capturar: ["Foto general de la tienda", "Estado de productos"],
        areas_oportunidad: ["An√°lisis manual requerido"],
        prioridad_visita: "media",
        tiempo_estimado: "30-45 minutos",
        preparacion_especial: "Ninguna especial"
      };
    }
  }

  async generarAnalisisPostvisita(contexto) {
    const prompt = `
Analiza los RESULTADOS de una visita completada a tienda.

DATOS DE LA VISITA:
- Duraci√≥n: ${contexto.visita_actual.duracion_minutos || 'No registrada'} minutos
- Tipo: ${contexto.visita_actual.tipo}
- Notas finales: ${contexto.visita_actual.notas_finales || 'Sin notas'}

FEEDBACK CAPTURADO DEL TENDERO (${contexto.feedback_tendero.length} comentarios):
${contexto.feedback_tendero.map(f => 
  `- ${f.categoria}: ${f.descripcion} (Urgencia: ${f.urgencia})`
).join('\n')}

EVALUACI√ìN DE LA TIENDA:
${contexto.evaluacion_tienda ? JSON.stringify(contexto.evaluacion_tienda.aspectos, null, 2) : 'No disponible'}

EVIDENCIAS SUBIDAS: ${contexto.evidencias.length} fotos/documentos

RECOMENDACIONES PRE-VISITA QUE SE DIERON:
${contexto.analisis_previsita ? JSON.stringify(contexto.analisis_previsita, null, 2) : 'No hab√≠a an√°lisis previo'}

VISITA ANTERIOR (para comparaci√≥n):
${contexto.visita_anterior ? 
  `Fecha: ${contexto.visita_anterior.fecha_realizada}, Duraci√≥n: ${contexto.visita_anterior.duracion_minutos} min` : 
  'Primera visita registrada'}

INSTRUCCIONES:
Compara la situaci√≥n actual vs la anterior y eval√∫a el progreso. Analiza:
1. ¬øQu√© mejoras se implementaron desde la √∫ltima visita?
2. ¬øQu√© problemas nuevos aparecieron?
3. ¬øQu√© tan efectivas fueron las recomendaciones previas?
4. ¬øQu√© seguimiento se requiere?
5. ¬øCu√°ndo deber√≠a ser la pr√≥xima visita?

RESPONDE EN FORMATO JSON:
{
  "resumen_ejecutivo": "resumen en 2-3 l√≠neas de la visita",
  "mejoras_implementadas": ["mejora confirmada desde visita anterior"],
  "nuevos_problemas": ["problema nuevo identificado en esta visita"],
  "seguimiento_requerido": ["acci√≥n espec√≠fica de seguimiento"],
  "efectividad_recomendaciones": "alta|media|baja",
  "proximas_acciones": ["acci√≥n espec√≠fica recomendada"],
  "nivel_seguimiento": "alto|medio|bajo",
  "fecha_proxima_visita": "fecha sugerida o per√≠odo",
  "acciones_inmediatas": ["acci√≥n que requiere atenci√≥n inmediata"]
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json|```/g, '').trim();
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estructura m√≠nima
        if (!analysis.resumen_ejecutivo || !analysis.nivel_seguimiento) {
          throw new Error('Estructura de respuesta inv√°lida');
        }
        
        return analysis;
      }
      
      throw new Error('No se pudo extraer JSON v√°lido');
      
    } catch (error) {
      console.error('Error en an√°lisis post-visita:', error);
      return {
        resumen_ejecutivo: "Visita completada - an√°lisis autom√°tico fall√≥, revisar datos manualmente",
        mejoras_implementadas: [],
        nuevos_problemas: ["Error en an√°lisis autom√°tico"],
        seguimiento_requerido: ["Revisi√≥n manual de resultados de la visita"],
        efectividad_recomendaciones: "media",
        proximas_acciones: ["Programar siguiente visita", "Revisar datos manualmente"],
        nivel_seguimiento: "medio",
        fecha_proxima_visita: "En 30 d√≠as",
        acciones_inmediatas: []
      };
    }
  }

  async generarAnalisisTendencias(contexto) {
    const prompt = `
Analiza TENDENCIAS Y PATRONES en el sector retail basado en datos de ${contexto.periodo_analisis}.

DATOS ANALIZADOS:
- Per√≠odo: ${contexto.periodo_analisis}
- Total feedback de tenderos: ${contexto.total_feedback}
- Total evaluaciones de tiendas: ${contexto.total_evaluaciones}

PROBLEMAS M√ÅS FRECUENTES:
${Object.entries(contexto.problemas_frecuentes)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 10)
  .map(([problema, count]) => `- ${problema}: ${count} ocurrencias`)
  .join('\n')}

DISTRIBUCI√ìN MENSUAL DE PROBLEMAS:
${Object.entries(contexto.patrones_mensuales)
  .map(([mes, count]) => `- Mes ${mes}: ${count} reportes`)
  .join('\n')}

INSTRUCCIONES:
Identifica patrones significativos y tendencias emergentes. Analiza:
1. ¬øQu√© problemas son estacionales vs permanentes?
2. ¬øQu√© tendencias emergentes ves en el sector?
3. ¬øQu√© oportunidades de mejora sist√©mica existen?
4. ¬øQu√© puedes predecir para los pr√≥ximos 3 meses?

RESPONDE EN FORMATO JSON:
{
  "tendencias_principales": ["tendencia principal identificada"],
  "problemas_estacionales": {"mes_numero": "problema t√≠pico de ese mes"},
  "sectores_oportunidad": ["√°rea de mejora que afecta m√∫ltiples tiendas"],
  "predicciones_3meses": ["predicci√≥n espec√≠fica para pr√≥ximos 3 meses"],
  "alertas_tempranas": ["se√±al de alerta que requiere atenci√≥n"],
  "recomendaciones_estrategicas": ["recomendaci√≥n de alto nivel para mejorar el sistema"]
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json|```/g, '').trim();
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estructura m√≠nima
        if (!analysis.tendencias_principales) {
          throw new Error('Estructura de respuesta inv√°lida');
        }
        
        return analysis;
      }
      
      throw new Error('No se pudo extraer JSON v√°lido');
      
    } catch (error) {
      console.error('Error en an√°lisis de tendencias:', error);
      return {
        tendencias_principales: ["An√°lisis en desarrollo - datos insuficientes"],
        problemas_estacionales: {},
        sectores_oportunidad: ["Mejora de procesos de visitas"],
        predicciones_3meses: ["Continuidad de operaciones normales"],
        alertas_tempranas: ["Verificar calidad de datos recopilados"],
        recomendaciones_estrategicas: ["Mantener monitoreo regular", "Incrementar frecuencia de visitas"]
      };
    }
  }

  async generarPredicciones(contexto) {
    const prompt = `
Genera PREDICCIONES para una tienda espec√≠fica bas√°ndote en su historial.

TIENDA: ${contexto.tienda.nombre}
M√âTRICAS ACTUALES:
- NPS: ${contexto.metricas_actuales.nps}
- Damage Rate: ${contexto.metricas_actuales.damage_rate}%
- Out of Stock: ${contexto.metricas_actuales.out_of_stock}%

TENDENCIA EN FEEDBACK (√∫ltimos 6 meses):
${contexto.historial_feedback.slice(0, 15).map(f => 
  `[${f.fecha}] ${f.categoria}: ${f.urgencia}`
).join('\n')}

TENDENCIA EN EVALUACIONES:
${contexto.historial_evaluaciones.slice(0, 10).map(e => 
  `[${e.fecha}] Limpieza: ${e.aspectos?.limpieza?.calificacion || 'N/A'}/5`
).join('\n')}

INSTRUCCIONES:
Bas√°ndote en las tendencias hist√≥ricas, predice:
1. ¬øQu√© problemas podr√≠an surgir en los pr√≥ximos 2-3 meses?
2. ¬øQu√© m√©tricas podr√≠an empeorar?
3. ¬øQu√© acciones preventivas se recomiendan?
4. ¬øCon qu√© frecuencia deber√≠a visitarse esta tienda?

RESPONDE EN FORMATO JSON:
{
  "problemas_potenciales": ["problema que podr√≠a surgir"],
  "metricas_en_riesgo": ["m√©trica que podr√≠a empeorar"],
  "acciones_preventivas": ["acci√≥n espec√≠fica para prevenir problemas"],
  "frecuencia_visitas_sugerida": "cada X d√≠as/semanas",
  "nivel_riesgo": "alto|medio|bajo",
  "indicadores_alerta": ["qu√© vigilar espec√≠ficamente"],
  "recomendaciones_inmediatas": ["acci√≥n a tomar pronto"]
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const cleanText = text.replace(/```json|```/g, '').trim();
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estructura m√≠nima
        if (!analysis.nivel_riesgo) {
          throw new Error('Estructura de respuesta inv√°lida');
        }
        
        return analysis;
      }
      
      throw new Error('No se pudo extraer JSON v√°lido');
      
    } catch (error) {
      console.error('Error en predicciones:', error);
      return {
        problemas_potenciales: ["An√°lisis predictivo en desarrollo"],
        metricas_en_riesgo: ["Monitorear todas las m√©tricas regularmente"],
        acciones_preventivas: ["Mantener programa de visitas regular"],
        frecuencia_visitas_sugerida: "cada 30 d√≠as",
        nivel_riesgo: "medio",
        indicadores_alerta: ["Cambios significativos en NPS o inventario"],
        recomendaciones_inmediatas: ["Continuar monitoreo regular"]
      };
    }
  }
}

module.exports = { GeminiService };